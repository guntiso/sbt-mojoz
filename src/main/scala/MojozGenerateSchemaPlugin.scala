package org.mojoz

import mojoz.metadata.out.SqlWriter
import sbt.Keys._
import sbt._
import sbt.plugins.JvmPlugin


object MojozGenerateSchemaPlugin extends AutoPlugin {
  object autoImport {
    val mojozSchemaSqlFile = settingKey[File]("File where to write schema sql")
    val mojozSchemaSqlWriter = taskKey[SqlWriter]("SqlWriter used to generate schema, check mojoz.metadata.out.SqlWriter for already available writers")
    val mojozGenerateSchemaSqlFile = taskKey[File]("Generates schema sql")
    val mojozPrintSchemaSql = inputKey[Unit]("Prints schema sql string for (space-delimited) table name(s)")

    // Lists schema sql files generated by projects current project depends on
    val mojozDependencyGeneratedSqls = Def.taskDyn {
      val dependencies = thisProject.value.dependencies.map(_.project)
      val allSettings = Project.extract(state.value).structure.settings
      val projectsWithSchemaSetting = allSettings.filter(_.key.key == mojozGenerateSchemaSqlFile.key)
        .flatMap(_.key.scope.project.toOption.map(Seq(_)).getOrElse(Seq())).toSet
      val depsWithSetting = dependencies.filter(projectsWithSchemaSetting)
      mojozGenerateSchemaSqlFile.all(ScopeFilter(inProjects(depsWithSetting: _*)))
    }
  }

  import autoImport._
  import MojozTableMetadataPlugin.autoImport._
  override def trigger = noTrigger
  override def requires = JvmPlugin && MojozTableMetadataPlugin

  override val projectSettings = Seq(

    mojozGenerateSchemaSqlFile := {
      val sqlFile = mojozDependencyGeneratedSqls.value

      val tableMd = mojozTableMetadata.value
      val allTables = tableMd.tableDefs.map(_.name).sorted
      IO.write(mojozSchemaSqlFile.value, mojozSchemaSqlWriter.value.schema(allTables map tableMd.tableDef))
      mojozSchemaSqlFile.value
    },

    mojozPrintSchemaSql := {
      import sbt.complete.DefaultParsers._
      import mojoz.metadata.out.SqlWriter
      // get the result of parsing
      val args: Seq[String] = spaceDelimited("<arg>").parsed
      val allTableNames =
        mojozTableMetadata.value.tableDefs.map(_.name).sorted
      if (args.isEmpty) {
        println("Please specify * for all tables or (space delimited) table name(s), one or more of:")
        println(allTableNames.mkString(" "))
      } else {
        val tableNames =
          if (args.size == 1 && args(0) == "*") allTableNames
          else args
        println(mojozSchemaSqlWriter.value.schema(tableNames.toList map mojozTableMetadata.value.tableDef))
      }
    },

    // not exactly source generation, but we want schema to be generated during compilation
    // to disable this 'effect' add to your buid -  mojozGenerateSchemaSqlFile := { null }
    sourceGenerators in Compile += mojozGenerateSchemaSqlFile.map(_ => Seq()).taskValue
  )

}
